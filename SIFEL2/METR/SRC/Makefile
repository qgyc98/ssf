####################################################################
#
#  Makefile for coupled transport-mechanical code METR
#
####################################################################



################################################################### 
#  Include default part of Makefile - 
#  compiler definitions, flags, libraries ...
#
include ../../Makefile.in



################################################################### 
#  List of include directories
#
INCLUDES        = ../../GEFEL/:../../GEFEL/PARSER/:../../GEFEL/OPTIM:../../GEFEL/RANDY:../../GEFEL/CMLFILE:../../MEFEL/SRC:../../TRFEL/SRC



################################################################### 
#  List of local libraries
#
LOC_LIBS = -lmef -ltrf -lgef 



####################################################################
#  List of source files
#
SRCS  = axiquadc.cpp axisymc.cpp barelc.cpp baroghelBc.cpp bentonitemat.cpp C30baroghelc.cpp C60baroghelc.cpp C60bazantc.cpp concreteBc.cpp
SRCS += consol_awf1c.cpp consol_awf2c.cpp consol_hwf2c.cpp consol_wf1c.cpp consol_wf2c.cpp consol_hawf3c.cpp constrelcl.cpp constrelcu.cpp 
SRCS += coupbclc.cpp coupmat.cpp coupmatl.cpp coupmatu.cpp couptop.cpp cpcsolver.cpp elementc.cpp 
SRCS += elemswitchc.cpp fcsolver.cpp glasgowcoup.cpp glasgowmatc.cpp globalc.cpp globmatc.cpp hexahedc.cpp intpointsc.cpp 
SRCS += isotrmatc.cpp lhsrhsc.cpp loadcasec.cpp metrinit.cpp multiphasec.cpp nodec.cpp o30bazantc.cpp onemediumc.cpp outdriverc.cpp 
SRCS += pcsolver.cpp probdescc.cpp quadrilatc.cpp sejtkrmatc.cpp solverc.cpp twomediac.cpp threemediac.cpp



####################################################################
#  List of object files
#
OBJS         := $(SRCS:%.cpp=$(OUTPUTPATH)%.o)
MOBJS        := $(OUTPUTPATH)metr.o
METR         := $(OUTPUTPATH)metr
LIBMETR      := $(OUTPUTPATH)libmet.a
DEPS         := $(SRCS:%.cpp=$(OUTPUTPATH)%.d) $(MOBJS:%.o=%.d)



####################################################################
#  List of dependent library files
#
#

# file names of dependent libraries
LIBDEPS  = $(SIFEL_ROOT)$(BIN_ROOT)GEFEL/$(OUTPUTDIR)libgef.a
LIBDEPS += $(SIFEL_ROOT)$(BIN_ROOT)MEFEL/SRC/$(OUTPUTDIR)libmef.a
LIBDEPS += $(SIFEL_ROOT)$(BIN_ROOT)TRFEL/SRC/$(OUTPUTDIR)libtrf.a

# path to depenedent libraries
DIR_LIBS  = -L$(SIFEL_ROOT)$(BIN_ROOT)GEFEL/$(OUTPUTDIR)
DIR_LIBS += -L$(SIFEL_ROOT)$(BIN_ROOT)MEFEL/SRC/$(OUTPUTDIR)
DIR_LIBS += -L$(SIFEL_ROOT)$(BIN_ROOT)TRFEL/SRC/$(OUTPUTDIR)



###########################################################################################
#  Following targets will be made regardless of whether there are files with the same names
#
.PHONY : mefel trfel



####################################################################
#  Targets
#
all:  $(METR)

$(METR): $(LIBDEPS) $(OBJS) $(MOBJS)
	@($(RM) $@)
	@($(RM) ../$@)
	@(echo "##### Creating METR library . . .")
	@(echo $(AR) $(ARFLAGS) $(OUTPUTPATH)libmet.a $(SRCS:%.cpp=$(OUTPUTDIR)%.o))
	@($(AR) $(ARFLAGS) $(OUTPUTPATH)libmet.a $(OBJS))
	@(echo "##### METR library was successfully created")
	@(echo "##### Creating metr executable . . .")
	$(CC) -o $@ $(MOBJS) $(EXECFLAGS) -L$(OUTPUTPATH) -lmet $(DIR_LIBS) $(LOC_LIBS) $(SYS_LIBS)
	@(echo "##### metr was successfully created")

$(MOBJS): | $(OUTPUTPATH)

$(OBJS):  | $(OUTPUTPATH)

$(OUTPUTPATH):
	@(mkdir -p $(OUTPUTPATH))

$(LIBDEPS): mefel trfel;

clean:
	@($(RM) $(METR) $(LIBMETR) $(MOBJS) $(OBJS) $(DEPS) *~ core )
	@(echo " metr was successfully cleaned")

cleanall: $(LIBDEPS)
	@($(RM) -r -f $(addprefix $(SIFEL_ROOT)$(BIN_ROOT)$(MODULE_PATH),$(REMOVEDIR)))
	@(echo " metr was successfully cleaned")

cleandepall: $(LIBDEPS)
	@($(RM) -r -f $(SIFEL_ROOT)$(BIN_ROOT)$(MODULE_PATH))
	@(echo " metr was successfully cleaned")



####################################################################
#  List of targets with dependent modules
#
mefel:
	+@(cd ../../MEFEL/SRC; $(MAKE) $(MAKECMDGOALS))

trfel: |mefel;
	+@(cd ../../TRFEL/SRC; $(MAKE) $(MAKECMDGOALS))



####################################################################
#  Dependencies generated by compilers
#
-include $(DEPS)



####################################################################
#  Suffix rules
#
$(OUTPUTPATH)%.o : %.cpp
	@export CPATH=$(INCLUDES); \
	echo $(CC) $(CFLAGS) -c $(<D)/$(<F); \
	$(CC) $(CFLAGS) $(COMPATFLAGS) $(COMMONFLAGS) $(DEFS) -c $(<D)/$(<F) -o $(@D)/$(@F)
