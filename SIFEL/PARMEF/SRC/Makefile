################################################################
#
#  Makefile for parallel mechcode
#    
################################################################



# the following variable indicates the makefile as the parallel part of code
PARSIFEL = yes



################################################################### 
#  Include default part of Makefile - 
#  compiler definitions, flags, libraries ...
#
include ../../Makefile.in



################################################################### 
#  List of include directories
#
INCLUDES         = ../../GEFEL/:../../GEFEL/PARSER/:../../GEFEL/OPTIM:../../GEFEL/RANDY:../../GEFEL/CMLFILE:../../PARGEF/:../../MEFEL/SRC/
#:$(MPI_HOME)/include:$(PETSC_DIR)/include:$(PETSC_DIR)/bmake/linux-gnu-cxx-debug



################################################################### 
#  List of libraries
#
LOC_LIBS        = -lmef -lpargef -lgef 



####################################################################
# List of source files
#
SRCS = hpssolver.cpp pcpsolver.cpp pglobal.cpp pllssolver.cpp plssolver.cpp pmefelinit.cpp pmtsolver.cpp pnewtonraph.cpp pprobdesc.cpp psolverm.cpp



####################################################################
# List of object files
#
OBJS         := $(SRCS:%.cpp=$(OUTPUTPATH)%.o)
MOBJS        := $(OUTPUTPATH)pmefel.o
PMEFEL       := $(OUTPUTPATH)pmefel
LIBPMEFEL    := $(OUTPUTPATH)libpmef.a
DEPS         := $(SRCS:%.cpp=$(OUTPUTPATH)%.d) $(MOBJS:%.o=%.d)



####################################################################
#  List of lib files
#

# list of dependent libraries
LIBDEPS = $(SIFEL_ROOT)$(BIN_ROOT)GEFEL/$(OUTPUTDIR)libgef.a  $(SIFEL_ROOT)$(BIN_ROOT)MEFEL/SRC/$(OUTPUTDIR)libmef.a  $(SIFEL_ROOT)$(BIN_ROOT)PARGEF/$(OUTPUTDIR)libpargef.a

# list of paths for dependent libraries
DIR_LIBS=-L$(SIFEL_ROOT)$(BIN_ROOT)MEFEL/SRC/$(OUTPUTDIR) -L$(SIFEL_ROOT)$(BIN_ROOT)PARGEF/$(OUTPUTDIR) -L$(SIFEL_ROOT)$(BIN_ROOT)GEFEL/$(OUTPUTDIR)

# list of mpi libraries
#MPI_LIB = -L$(MPI_HOME)/lib -lpmpich++ -lpmpich

#list of all necessary libraries
LIBS	= $(DIR_LIBS) $(LOC_LIBS) $(SYS_LIBS) 
#${MPI_LIB} #${PETSC_LIB} ${PETSC_C_SH_LIB_PATH}



###########################################################################################
#  Following targets will be made regardless of whether there are files with the same names
#
.PHONY : mefel pargef



#########################################################################
#  Targets
#
all:  $(PMEFEL)

$(PMEFEL): $(LIBDEPS) $(MOBJS) $(OBJS)
	@($(RM) $@)
	@($(RM) ../$@)	
	@(echo "##### Creating PARMEF library . . .")
	@(echo $(AR) $(ARFLAGS) $(OUTPUTPATH)libpmef.a $(SRCS:%.cpp=$(OUTPUTDIR)%.o))
	@($(AR) $(ARFLAGS) $(OUTPUTPATH)libpmef.a $(OBJS))
	@(echo "##### PARMEF library was successfully created")
	@(echo "##### Creating pmefel executable . . .")
	$(PCC) -o $@ $(MOBJS) $(EXECFLAGS) -L$(OUTPUTPATH) -lpmef $(LIBS)
	@(echo "##### pmefel was successfully created")

$(MOBJS): | $(OUTPUTPATH)
$(OBJS):  | $(OUTPUTPATH)

$(OUTPUTPATH):
	@(mkdir -p $(OUTPUTPATH))

$(LIBDEPS): mefel pargef;

clean:    
	@($(RM)  $(PMEFEL) $(LIBPMEFEL) $(OBJS) $(DEPS) *~ core)
	@(echo " pmefel was successfully cleaned")

cleanall: $(LIBDEPS)
	@($(RM) -r -f $(addprefix $(SIFEL_ROOT)$(BIN_ROOT)$(MODULE_PATH),$(REMOVEDIR)))
	@(echo " pmefel was successfully cleaned")

cleandepall: $(LIBDEPS)
	@($(RM) -r -f $(SIFEL_ROOT)$(BIN_ROOT)$(MODULE_PATH))
	@(echo " pmefel was successfully cleaned")

cleandeb:    clean
cleanopt:    clean
cleanoptdeb: clean

cleandep:       cleanall
cleandepdeb:    cleanall
cleandepopt:    cleanall
cleandepoptdeb: cleanall



################################################################
#  List of targets with dependent modules
#
mefel:
	+@(cd ../../MEFEL/SRC; $(MAKE) $(MAKECMDGOALS))

pargef: mefel
	+@(cd ../../PARGEF; $(MAKE) $(MAKECMDGOALS))



####################################################################
#  Dependencies generated by compilers
#
-include $(DEPS)



####################################################################
#  Suffix rules
#
$(OUTPUTPATH)%.o : %.cpp
	@export CPATH=$(INCLUDES); \
	echo $(PCC) $(CFLAGS) -c $(<D)/$(<F); \
	$(PCC) $(CFLAGS) $(COMPATFLAGS) $(DEFS) -c $(<D)/$(<F) -o $(@D)/$(@F)
