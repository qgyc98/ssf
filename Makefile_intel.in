#
#  DEFAULT MAKEFILE 
#  ----------------
#  This file is included by all Makefiles of SIFEL.
#  Every modification or new definition influence make process of all SIFEL parts.
#



###############################################
#                                             #
# Definition of compiler and compiler options #
#                                             #
###############################################

.SUFFIXES:      .cpp

# C/C++ compiler tool
CC              = icpc

# no compiler macros are defined by default
DEFS            =

#
# detect Fortran compiler
# and define corresponding compiler macro FC_DEF in case of success
# 
ifndef FC_DEF
  export FC_DEF :=  $(shell gfortran -v 2>/dev/null && echo "enabled" || echo "disabled")
endif

# FORTRAN compiler tool
ifeq ($(FC_DEF), enabled)
  DEFS          += -D FCC_DEF
  FC             = ifort
  FCFLAGS        = -Wno-unused-dummy-argument -Wno-unused
endif

# PGi c++
#CC              = pgi++

# default compiler flags
CFLAGS          = -g -Wall

# compiler flags for debug version
DEBCFLAGS       = -g -Wall -W -ansi -pedantic

# compiler flags for optimized version
OPTCFLAGS       = -O3 
#OPTCFLAGS       = -O3  -fno-alias -pc64 -tpp6 -xK -ipo -restrict -align -Zp16

# compiler flags for optimized version with debug informations
OPTDEBCFLAGS    = -O3 -g 

# compiler flags which suppress some annoying repeated warnings
# these options are not printed during compilation process by default
COMPATFLAGS	= -Wno-write-strings -Wno-unused-but-set-variable -Wno-unused-result

# compiler flags for compatibility with library for tracing source files used for optimized version
# these options are not printed during compilation process by default
COMPATOPTFLAGS	= -fno-omit-frame-pointer -fno-optimize-sibling-calls



###############################################
#                                             #
# Definition of compiler and compiler options #
# for parallel parts of the code              #
#                                             #
###############################################

ifdef PARSIFEL

# parallel compiler tool - not used in the sequential parts of the code
PCC             = mpiicpc

# default compiler macro for mpiCC
#DEFS           += -D MPICH_IGNORE_CXX_SEEK

endif



##########################################
#                                        #
# Auxiliary uitlities and their switches #
#                                        #
##########################################

# shell tool
SHELL           = /bin/sh
# library manager
AR              = ar
# library manager options
ARFLAGS         = -rucs
# delete command
RM              = rm -f
# copy command
CP		= cp
# tool for merging of several static library files
MERGELIB	= ../mergelib
# command for making of dependencies
DEPEND          = makedepend
#OLD_SHELL     := $(SHELL) 
#SHELL          = $(warning [$@ ($^) ($?)])$(OLD_SHELL)




###########################
#                         #
# Definition of libraries #
#                         #
###########################

# local libraries needed by all targets (actually no such library), 
# in particular targets will be redefined (e.g. LOC_LIBS =  libgef.a)
LOC_LIBS	=

#  add default system libraries needed by all targets 
# (-lm = math library; -rdynamic = enforce including all symbol tables; -ldl = default shared libary support)
SYS_LIBS       = -lm -rdynamic -ldl

ifeq ($(FC_DEF), enabled)
 # SYS_LIBS += -lgfortran
endif


#######################################
#                                     #
#  Detection of additional libraries  #
#                                     #
#######################################

#
# detect library for tracing source files - libbfd.{a|so}
# and define corresponding compiler macro TRACE_SOURCE_FILES in case of success
# 
ifndef TRACE_SRC_F
  export TRACE_SRC_F    :=  $(shell ld -o /dev/null -lbfd 2>/dev/null && echo "enabled" || echo "disabled")
endif

ifeq ($(TRACE_SRC_F), enabled)
  DEFS     += -D TRACE_SOURCE_FILES
  SYS_LIBS += -lbfd
endif



#
# detect FLLOP library
#

# comment out the following line if the FLLOP library should BE included
export INC_FLLOP := no

# if the FLLOP library is required then the PETSC and FLLOP subdirectories/links with/to actual versions must be
# included in the GEFEL directory
ifndef INC_FLLOP

  #
  # PETSC directory with compatible version of PETSc should be found in GEFEL
  #
  ifneq ($(realpath $(dir $(CURDIR)/$(lastword $(MAKEFILE_LIST)))GEFEL/PETSC/),)
    export INC_PETSC := yes
    # PETSc directory was found
  else
    export INC_PETSC := no
  endif
  $(info PETSc directory found: $(INC_PETSC))

  #
  # FLLOP directory should be found in GEFEL
  #
  ifeq ($(INC_PETSC), yes)  
    ifneq ($(realpath $(dir $(CURDIR)/$(lastword $(MAKEFILE_LIST)))GEFEL/FLLOP/),)
      export INC_FLLOP := yes
      # FLLOP directory was found
    endif
  else
    export INC_FLLOP := no
  endif
  $(info FLLOP directory found: $(INC_FLLOP))


  #
  # export of paths for fllop and PETSc libraries
  #
  ifeq ($(INC_FLLOP), yes)
    export PETSC_DIR=$(realpath $(dir $(CURDIR)/$(lastword $(MAKEFILE_LIST)))GEFEL/PETSC)
    export FLLOP_DIR=$(realpath $(dir $(CURDIR)/$(lastword $(MAKEFILE_LIST)))GEFEL/FLLOP)
    ifeq ($(MAKECMDGOALS),opt)
      export PETSC_ARCH=arch-linux2-c-opt
    else
      export PETSC_ARCH=arch-linux2-c-debug
    endif
    $(info PETSc directory: $(PETSC_DIR))
    $(info FLLOP directory: $(FLLOP_DIR))
    $(info PETSc/FLLOP arch. subdirectory: $(PETSC_ARCH))
  endif
endif
ifeq ($(INC_FLLOP), yes)
  #
  # Due to PETSc and FLLOP, MPI compiler must be used instead of default g++
  CC     = mpiicpc
  DEFS  += -D INC_FLLOP
  SYS_LIBS += -L$(FLLOP_DIR)/$(PETSC_ARCH)/lib -Wl,-rpath -lfllop
endif




#######################################
#                                     #
#  Detection of additional libraries  #
#  for parallel parts of the code     #
#                                     #
#######################################

ifeq ($(PARSIFEL), yes)

#
# detect MPI library used for the communication among parallel processes 
# MPI library is used ONLY in the parallel  parts of the code
#
#ifndef MPI_HOME
#  MPI_HOME  =  $(shell ld -o /dev/null -lpmpich++ 2>/dev/null && echo "yes" || echo "no")
#  MPI_HOME +=  $(shell ld -o /dev/null -lpmpich 2>/dev/null && echo "yes" || echo "no")
#  XTEST := $(MPI_HOME)
#  ifeq ($(MPI_HOME), "yes yes")
#    export MPI_HOME :=
#  else
#   export MPI_HOME=/usr/local/mpich
#   $(info variable MPI_HOME is set to default value $(MPI_HOME))
#  endif
#endif


#ifndef PETSC_DIR
#export PETSC_DIR=/usr/local/petsc
#$(warning variable PETSC_DIR is set to default value $(PETSC_DIR))
#endif

endif
